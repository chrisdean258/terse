use crate::span::Span;
use std::fmt::{Display, Formatter};

#[derive(Debug, Clone)]
pub struct Token {
    pub span: Span,
    pub value: Kind,
}

#[derive(Debug, Clone, PartialEq)]
pub enum Kind {
    Integer(i64),
    Float(f64),
    Str(String),
    Char(char),
    Identifier(String),
    Bool(bool),
    LambdaArg(usize),
    SingleEquals,
    DoubleEquals,
    FatArrow,
    LessThan,
    LessThanOrEqual,
    BitShiftLeft,
    BitShiftLeftEquals,
    GreaterThan,
    GreaterThanOrEqual,
    BitShiftRight,
    BitShiftRightEquals,
    Plus,
    Increment,
    PlusEquals,
    CrossArrow,
    Minus,
    Decrement,
    MinusEquals,
    SkinnyArrow,
    Asterik,
    TimesEquals,
    ForwardSlash,
    DoubleForwardSlash,
    ForwardSlashEquals,
    DoubleForwardSlashEquals,
    Mod,
    ModEquals,
    BangSign,
    Tilde,
    TildeEquals,
    SquigglyArrow,
    NotEqual,
    Ampersand,
    AmpersandEquals,
    DoubleAmpersand,
    DoubleAmpersandEquals,
    Pipe,
    PipeEquals,
    DoublePipe,
    DoublePipeEquals,
    PipeArrow,
    Hat,
    HatEquals,
    DoubleHat,
    DoubleHatEquals,
    Comma,
    Dot,
    OpenParen,
    CloseParen,
    OpenBracket,
    CloseBracket,
    OpenBrace,
    CloseBrace,
    DollarSign,
    BackSlash,
    For,
    In,
    If,
    Else,
    Function,
    While,
    Let,
    Var,
    Break,
}

impl Display for Kind {
    fn fmt(&self, f: &mut Formatter) -> std::fmt::Result {
        match self {
            Self::Integer(i) => write!(f, "{i}"),
            Self::Float(fl) => write!(f, "{fl}"),
            Self::Bool(b) => write!(f, "{b}"),
            Self::Str(s) => write!(f, "{s:?}"),
            Self::Char(c) => write!(f, "{c}"),
            Self::Identifier(s) => write!(f, "{s}"),
            Self::LambdaArg(i) => write!(f, "\\{i}"),
            Self::SingleEquals => write!(f, "="),
            Self::DoubleEquals => write!(f, "=="),
            Self::FatArrow => write!(f, "=>"),
            Self::LessThan => write!(f, "<"),
            Self::LessThanOrEqual => write!(f, "<="),
            Self::BitShiftLeft => write!(f, "<<"),
            Self::BitShiftLeftEquals => write!(f, "<<="),
            Self::GreaterThan => write!(f, ">"),
            Self::GreaterThanOrEqual => write!(f, ">="),
            Self::BitShiftRight => write!(f, ">>"),
            Self::BitShiftRightEquals => write!(f, ">>="),
            Self::Plus => write!(f, "+"),
            Self::Increment => write!(f, "++"),
            Self::PlusEquals => write!(f, "+="),
            Self::CrossArrow => write!(f, "+>"),
            Self::Minus => write!(f, "-"),
            Self::Decrement => write!(f, "--"),
            Self::MinusEquals => write!(f, "-="),
            Self::SkinnyArrow => write!(f, "->"),
            Self::Asterik => write!(f, "*"),
            Self::TimesEquals => write!(f, "*="),
            Self::ForwardSlash => write!(f, "/"),
            Self::DoubleForwardSlash => write!(f, "//"),
            Self::ForwardSlashEquals => write!(f, "/="),
            Self::DoubleForwardSlashEquals => write!(f, "//="),
            Self::Mod => write!(f, "%"),
            Self::ModEquals => write!(f, "%="),
            Self::BangSign => write!(f, "!"),
            Self::NotEqual => write!(f, "!="),
            Self::Tilde => write!(f, "~"),
            Self::TildeEquals => write!(f, "~="),
            Self::SquigglyArrow => write!(f, "~>"),
            Self::Ampersand => write!(f, "&"),
            Self::AmpersandEquals => write!(f, "&="),
            Self::DoubleAmpersand => write!(f, "&&"),
            Self::DoubleAmpersandEquals => write!(f, "&&="),
            Self::Pipe => write!(f, "|"),
            Self::PipeEquals => write!(f, "|="),
            Self::DoublePipe => write!(f, "||"),
            Self::DoublePipeEquals => write!(f, "||="),
            Self::PipeArrow => write!(f, "|>"),
            Self::Hat => write!(f, "^"),
            Self::HatEquals => write!(f, "^="),
            Self::DoubleHat => write!(f, "^^"),
            Self::DoubleHatEquals => write!(f, "^^="),
            Self::Comma => write!(f, ","),
            Self::Dot => write!(f, "."),
            Self::OpenParen => write!(f, "("),
            Self::CloseParen => write!(f, ")"),
            Self::OpenBracket => write!(f, "["),
            Self::CloseBracket => write!(f, "]"),
            Self::OpenBrace => write!(f, "{{"),
            Self::CloseBrace => write!(f, "}}"),
            Self::DollarSign => write!(f, "$"),
            Self::BackSlash => write!(f, "\\"),
            Self::For => write!(f, "for"),
            Self::In => write!(f, "in"),
            Self::If => write!(f, "if"),
            Self::Else => write!(f, "else"),
            Self::Function => write!(f, "fn"),
            Self::While => write!(f, "while"),
            Self::Let => write!(f, "let"),
            Self::Var => write!(f, "var"),
            Self::Break => write!(f, "break"),
        }
    }
}
